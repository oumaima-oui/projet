"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Mutation = void 0;
const arg_1 = __importDefault(require("arg"));
const filter = __importStar(require("../utils/filter"));
const factory_1 = require("../utils/factory");
const metadata_1 = require("../constants/metadata");
class Mutation {
    args;
    devour({ commands, options, missing, majors }) {
        const command = this.findCommand(commands);
        const optionDatas = filter.optionsToDatas(options);
        const globalOptions = filter.optionsToKeyValue(optionDatas);
        const commandOptions = this.findSubOptions(command);
        const nextOptions = command ? commandOptions : globalOptions;
        this.args = (0, arg_1.default)(nextOptions, { permissive: true });
        let currnetTriggerOptionKey = '';
        const nativeOption = Object.keys(nextOptions).reduce((pre, key) => {
            if (!key.startsWith('--'))
                return pre;
            const nativeKey = filter.removeHyphen(key);
            const nativeVal = this.args[key] || undefined;
            if (nativeVal) {
                currnetTriggerOptionKey = nativeKey;
            }
            return Object.assign({}, pre, { [nativeKey]: nativeVal });
        }, {});
        const factory = new factory_1.Factory({
            nativeOption,
            args: this.args,
            commands,
            options,
        });
        if (command) {
            const params = factory.getServiceParams(command);
            return new command(...params);
        }
        const currentTriggerOptionFn = options.find(fn => {
            const data = Reflect.getMetadata(metadata_1.metadata.OPTION_IDENTIFIER, fn);
            return data && data.name === currnetTriggerOptionKey;
        });
        if (currentTriggerOptionFn) {
            const value = nativeOption[currnetTriggerOptionKey];
            const params = factory.getServiceParams(currentTriggerOptionFn, value);
            return new currentTriggerOptionFn(...params);
        }
        if (this.args._.length) {
            return missing.forEach(missCommand => {
                const params = factory.getServiceParams(missCommand);
                new missCommand(...params);
            });
        }
        majors.forEach(majorCommand => {
            const params = factory.getServiceParams(majorCommand);
            new majorCommand(...params);
        });
    }
    findSubOptions(command) {
        if (!command)
            return {};
        const subs = Reflect.getMetadata(metadata_1.metadata.SUB_OPTION_IDENTIFIER, command);
        return filter.optionsToKeyValue(subs);
    }
    findCommand(commands) {
        const inputs = process.argv.slice(2) || [];
        const first = inputs[0];
        if (!first || first.startsWith('-'))
            return undefined;
        return commands.find(item => {
            const data = Reflect.getMetadata(metadata_1.metadata.COMMAND_IDENTIFIER, item);
            if (!data)
                return false;
            return data.name === first || data.alias === first;
        });
    }
}
exports.Mutation = Mutation;
