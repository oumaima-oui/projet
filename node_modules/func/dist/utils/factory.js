"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Factory = void 0;
const services = __importStar(require("../services"));
const filter = __importStar(require("./filter"));
const metadata_1 = require("../constants/metadata");
const serviceFunctions = Object.keys(services).map(key => services[key]);
class Factory {
    params;
    constructor(params) {
        this.params = params;
    }
    getServiceParams(fn, value) {
        const paramTypes = Reflect.getMetadata(metadata_1.metadata.DESIGN_PARAM_TYPES, fn) || [];
        const args = this.params.args;
        const option = this.params.nativeOption;
        return paramTypes.map(type => {
            const fn = serviceFunctions.find(item => item === type);
            if (!fn)
                return undefined;
            if (!fn.isRegisterProvider)
                return new fn(args._, option, args, value);
            const cDatas = filter.commandsToDatas(this.params.commands);
            const oDatas = filter.optionsToDatas(this.params.options);
            return new fn(cDatas, oDatas);
        });
    }
}
exports.Factory = Factory;
